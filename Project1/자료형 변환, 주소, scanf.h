// 자료형 변환
/*
서로 다른 자료형을 가진 변수끼리 연산이 이루어질 때 기존에 지정했던 자료형을 다른 자료형으로 변환하는 과정

암묵적 형 변환
서로 다른 자료형으로 연산이 이루어질 때 자료형의 크기가 큰 자료형으로 변환되는 과정
 - 큰 자료형으로 암묵적 형 변환이 됨

  대입 연산 시 발생하는 형 변환
	int a = 10;
	double decimal = a;
	// 작은 자료형의 값을 큰 자료형에 넣게 되면 큰 자료형으로 암묵적으로 형 변환이 됨

	double data = 5.9312;
	int b = data;
	// 큰 자료형 값을 작은 자료형 메모리에 저장하게 되면 작은 자료형 메모리 형태로 저장이 됨

	정수의 승격
	- CPU가 한 번에 데이터를 읽어들일 수 있는 크기가 4 byte이기 때문에 정수의 승격을 해서 한 번에 읽을 수 있도록 컴파일러가 자동으로 형 변환을 해줌

	// 정수 연산 시 발생하는 형 변환
	char x = 10;
	short y = 20;

	printf("%d", x + y);

	// 수식의 연산 시 발생하는 형 변환
	// 작은 자료형과 큰 자료형이 연산을 하게 되면 큰 자료형을 기준으로 통일해서 작은 자료형이 형 변환 됨
	double z = 10 + 20.65;

	// 명시적 형 변환 (cast 연산자)
// 연산이 이루어지기 전에 사용자가 직접 자료형을 변환하는 과정
int x = 5;
int y = 2;

float result = 0.0;

result = (float)x / y;
printf("result 변수의 값: %f \n", result);
*/

// 주소 연산자
/*
* %p: 변수의 주소를 출력해주는 서식 지정자
변수의 주소 값 자체는 프로그램이 실행될 때 마다 계속해서 바뀜
데이터의 주소 값은 해당 데이터가 저장된 메모리의 시작 주소를 의미하며, 메모리 공간은 1바이트 크기로 나누어 표현됨

char A = 'a';
	int B = 10;
	float C = 99.65;

	printf("char A의 주소: %p \n", &A);
	printf("int B의 주소: %p \n", &B);
	printf("float C의 주소: %p \n", &C);

*/

