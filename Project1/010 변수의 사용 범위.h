
// 메모리 구조
/*
 코드 영역 - 실행할 프로그램의 코드가 저장되는 영역으로 cpu는 코드 영역에서 저장된 명령어를 하나씩 가져가서 처리하게 되는 구조
 데이터 영역 - 프로그램의 전역 변수와 정적 변수가 저장되는 영역으로, 시작과 함께 메모리에 할당이 되며
 프로그램이 종료 되어야만 메모리에서 사라지는 특성을 갖고 있다. [const char* 전역 변수/ 정적변수]
 스택 영역 - 함수의 호출과 함께 메모리에 할당되며 함수의 호출이 끝나면 메모리에서 사라지는 특성이 있음 [지역 변수와 매개 변수가 이에 포함됨]
 힙 영역 - 사용자에 의해 메모리가 도적으로 할당되고 사용자가 직접 메모리를 해제해야 함
 */

 // 변수의 종류
 /*
 지역 변수: 블록 내(중괄호)에서 선언된 변수를 의미하고, 지역 변수는 이 블록 내에서만 유효하며, 블록이 종료되면 사라짐
 ex)
         {
              int value = 20;  <- 블록을 벗어나면 사용할 수 없기 때문에 지역 변수
         }

 전역 변수: 함수의 외부에서 선언된 변수로 프로그램 어디에서든지 접근이 가능하며, 프로그램이 종료되어야만 메모리에서 사라지는 특징을 갖고 있다.
 * 그 어느 함수에도 포함되어있지 않은 함수 외부의 변수
 *
 정적 변수: 지역 변수(블록에서 벗어나면 사라짐)와 전역 변수(의 모든 특징을 갖고 있고, 프로그램이 종료될 때까지 메모리에 남아있음

 전체 예시
 #include <stdio.h>
int y=5; // 전역 변수
void fx() // 지역 변수
{
    int x = 10;
    y = 10;
    printf("ddd %d\n", y);
}

void abc()
{
    int a=0;
    a += 1;
    printf("a값: %d \n", a);

    static b = 0;  // 정적 변수(= static 변수)는 단 1번만 초기화하고 이후엔 전역변수처럼 프로그램이 종료될 때까지 메모리 공간에 존재하는 변수
    b += 1;
    printf("b의 값: %d \n", b);
}
int main(void)
{
    printf("%d \n", y);
    printf("%p \n", &y);

    abc();
    abc();
}

 외부 변수
 레지스터 변수
*/